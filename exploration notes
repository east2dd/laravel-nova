API controllers:

API\Ownership folder
- ConfirmController - handles confirmation of ownership (user_id owning a business)
- MethodsController - methods of claiming ownership for J. Random Business
- RequestsController - handles requests for business ownership - claiming?

API folder
- ActiveBusinessPostsController - get list of unexpired posts for J. Random Business
- BusinessBioController - generate generic bio for J. Random Business, update with supplied bio
- BusinessCoverController - upload post photo for J. Random Business
- BusinessesController - business CRUD, stats for searching businesses images and reviews in supplied area, business avatar UD
- BusinessFeedController - feed of reviews and posts for J. Random Business
- BusinessHoursController - update opening hours for J. Random Business
- BusinessPostsController - post CRU (no D) for J. Random Business
- BusinessReviewsController - create reviews of J. Random Business
- BusinessSearchController - handle elastic search queries for/on businesses
- CategoriesController - category CRUD
- DiscoverController - get list of businesses similar to J. Random Business
- ExploreController - location-limited business query search
- FaceDetectionController - detect faces from supplied image
- FeedController - List of businesses within certain distance of supplied point (2 km?),
- LoginController - Handle API-side login/logout
- MapPresetController - List of active map presets
- RegisterController - Handle user registrations, with (apparently-optional) 2FA
- StickerCategoriesController - List of sticker categories
- StickersController - List of stickers, either all, within a given category, and/or matching at least one of supplied tags
- TopCategoriesSearchController - List of popular categories
- UserBusinessesController - CD of user-business relations
- UserCategoriesController - List and C of user-category relations
- UserFeedController - Shuffled list of current user's reviews and businesses
- UserOptionalAttributesController - CRUD of optional, possibly user-defined, business attributes.
- UsersController - Update user details.

Services:
- BusinessBioService - generate default bio for J. Random Business, get closest city to J. Random Business
- BusinessCategoryService - return highest-ranking categories that match a supplied query.
- BusinessService - search for businesses near supplied point matching query, matching category (if supplied or implied by supplied map preset).
- CategoryService - get active categories list.
- FeedService - Return list of feeds near supplied point, XOR for J. Random Business, XOR for current user.
- MapPresetService - Return paginated list of active map presets.

Repositories:
- BusinessAttributesRepository - get list of attributes for J. Random Business in supplied list of keys.
- BusinessRepository - handle generic (from location, supplied query, category), similiar (to J. Random Business), find-specific, and suggest (from supplied query) queries for businesses.
- CategoriesRepository - Return specific category or all of them.
- FeedRepository - Return list of feeds near supplied point, XOR for J. Random Business, XOR for current user.
- MapPresetsRepository - Return specific map preset or query builder.
- OwnershipRequestsRepository - Check whether J. Random User has active request, check whether J. Random User has active request for J. Random Business, confirm request (no apparent check for expiry or previous confirm), create new request.
- OwnershipsRepository - create new active ownerships  (user-business combo is PK on ownerships table).

Models:

Authenticatable:
User - J. Random User.  Can only access API bitz.
StaffUser - Site Staff.  Need to be this to access Nova bitz.  Does not appear able to access API bitz.

Users can request PW resets but StaffUsers cannot - few enough to do manually?

Business-related:
Business - Name, lat, lng, bio, uuid, owner_id
BusinessAttribute - freeform key-value pairs to further describe parent business
BusinessCategory - Pivot model between business and category, with additional relevance score.
BusinessHour - Track open/close times of parent business by day-of-week
BusinessKeyword - Tracking keywords applicable to parent business, with additional relevance score.  Should this be a pivot model?
BusinessOptionalAttribute - Pivot model between business and optional attribute.
BusinessPost - Expirable site posts by parent business.
BusinessPostImage - image record for parent business post.
BusinessPostImageLabel - unsure. Is this still being used?
BusinessReview - recording reviews of business by user, with comment, code (rating?) and metadata.
BusinessReviewExtra - json metadata for parent business review.
BusinessReviewImage - image record for parent business review.  Points to image storage on S3.
BusinessReviewKeyword - looks very similar to BusinessKeyword, with same additional data.  Should also be a pivot model?

Map-related:
MapPreset - Some sort of map preset for mapping choice, eg Google maps?
MapPresetBusinessHour - analogue of BusinessHour for MapPreset
MapPresetCategory - Pivot table between map present and category, with only timestamps extra.
MapPresetHour - analogue of BusinessHour for MapPreset - is this a duplicate of MapPresetBusinessHour?

Ownership - pivot table between business and user that owns it
OwnershipRequest - request to take ownership of given business record

StickerCategory - category of stickers
Sticker - sticker/decal image record pointing to image storage presumably on S3.

Category - category to store both users and businesses.
Label - key/value pair.  Hangs off BusinessAttribute.

DB Refactoring questions:
I did note an apparently complete lack of polymorphic relations among the models.  Are polymorphic relations being avoided
because it breaks (I think) first and third normal form, because no one was comfortable with them, or something else?

BusinessKeyword and BusinessReviewKeyword both look like they really want to be pivot models, pointing to a "Keyword" model.
(Category currently does the same for both User and Business)

Assuming that polymorphic relations are OK to use, here's what I noticed:

BusinessHour and MapPresetBusinessHour - can they be refactored into a polymorphic many-to-many relation, to an "OpenHours" model or the like?
{$FOO}Image - can they be similarly refactored into a polymorphic M:N relation, to an "Image" model?
BusinessKeyword and BusinessReviewKeyword - can they be similarly refactored into a polymorphic M:N relation, to Keyword model with pivot data?

DB questions:
Why do the BusinessHour models have a boolean field for each day?  There seems to be no mechanism ensuring that
at most one record for J. Random Business' opening hours on a given day-of-week exists.  There did seem to be
such a day-of-week field in the past - why did it get removed?

Inconsistent relations:
I noticed that the following relations were inconsistent - for example differing pivot fields:
Business->categories() has relevance pivot and timestamps, but Category->businesses() only has timestamps.
Business->optionalAttributes() has description pivot and timestamps, but OptionalAttribute->businesses() only has timestamps.

Dangling relations:
BusinessAttribute->label() points to Label, but there's no reciprocal relation.
BusinessPost->images() points to BusinessPostImage, but no reciprocal relation.
BusinessReview->images() points to BusinessReviewImage, but no reciprocal relation.

Relations that need looking at:
User->bookmarks() is doing.. what?  It doesn't look like user_bookmarks was ever in migrations.
Business->hours() and Business->businessHours() have common stem
Business->addyAttributes(), Business->emailAttributes() has common stem with Business->attributes()
Since Ownerships is a glorified pivot table, shouldn't it have belongsTo relations with its parent Business, User and OwnershipRequest?
